import java.util.Stack;
public class Solution {

/*	Binary Tree Node class
 * 
 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/

    public static int countNodes(BinaryTreeNode<Integer> root){
        if(root == null){
            return 0;
        }
        return countNodes(root.left) + countNodes(root.right) + 1;
    }

	public static void printNodesSumToS(BinaryTreeNode<Integer> root, int s) {
		if(root == null){
            return;
        }
        int totalcount = countNodes(root);
        int count = 0;
        Stack<BinaryTreeNode<Integer>> inOrder = new Stack<>();
        Stack<BinaryTreeNode<Integer>> revInorder = new Stack<>();
        BinaryTreeNode<Integer> temp = root;
        
        while(temp != null){
            inOrder.push(temp);
            temp = temp.left;
        }
        temp = root;
        while(temp != null){
            revInorder.push(temp);
            temp = temp.right;
        }
        
        while(count < totalcount-1){
            BinaryTreeNode<Integer> top1 = inOrder.peek();
            BinaryTreeNode<Integer> top2 = revInorder.peek();
            
            if(top1.data + top2.data == s){
                System.out.println(top1.data+" "+top2.data);
                
                BinaryTreeNode<Integer> top = top1;
                inOrder.pop();
                count++;
                if(top.right != null){
                    top = top.right;
                    while(top != null){
                        inOrder.push(top);
                        top = top.left;
                    }
                }
                
                top = top2;
                revInorder.pop();
                count++;
                if(top.left != null){
                    top = top.left;
                    while(top != null){
                        revInorder.push(top);
                        top = top.right;
                    }
                }
            }
            else if(top1.data + top2.data > s){
                BinaryTreeNode<Integer> top = top2;
                revInorder.pop();
                count++;
                if(top.left != null){
                    top = top.left;
                    while(top != null){
                        revInorder.push(top);
                        top = top.right;
                    }
                }
            }
            else{
                BinaryTreeNode<Integer> top = top1;
                inOrder.pop();
                count++;
                if(top.right != null){
                    top = top.right;
                    while(top != null){
                        inOrder.push(top);
                        top = top.left;
                    }
                }
            }
        }
        
	}
}
