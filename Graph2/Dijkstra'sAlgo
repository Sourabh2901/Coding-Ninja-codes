import java.util.Scanner;

public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

			int Edges[][] = new int[V][V];
        
        for(int i=0;i<E;i++){
            int v1 = s.nextInt();
            int v2 = s.nextInt();
            int weight = s.nextInt();
            Edges[v1][v2] = weight;
            Edges[v2][v1] = weight;
        }
        
        dijkstra(Edges ,V);
	}

    public static void dijkstra(int Edges[][],int n){
        boolean visited [] = new boolean[n];
        int distances [] = new int[n];

        distances[0] = 0;

        for(int i=1;i<n;i++){
            distances[i] = Integer.MAX_VALUE;
        }

        for(int i=0;i<n;i++){
            int minVertex = findMinVertex(distances ,visited);
            visited[minVertex] = true;

            for(int j=0;j<n;j++){
                if(Edges[minVertex][j] != 0 && !visited[j]){
                    int c_dist = distances[minVertex] + Edges[minVertex][j];
                    if(c_dist < distances[j]){
                        distances[j] = c_dist;
                    }
                }
            }   
        }

        for(int i=0;i<n;i++){
            System.out.println(i+" "+distances[i]);
        }
    }

    private static int findMinVertex(int distance[],boolean visited[]){
        int minvertex = -1;
        int mindist = Integer.MAX_VALUE;

        for(int i=0;i < distance.length;i++){
            if(!visited[i] && distance[i] < mindist){
                mindist = distance[i];
                minvertex = i;
            }
        }
        return minvertex;
    }
    
}
