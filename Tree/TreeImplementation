package Tree;

import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class TreeimplemetationRecursion {

	
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		TreeNode<Integer> root = takeInput(s);
		 root = takeInputLevelWise();
		print(root);
		System.out.println("No of nodes "+numNodes(root));

	}
	
		private static int numNode(TreeNode<Integer> root) {
		if(root == null){
		return 0;
		}
		int count = 0;
		for(int i=0;i<root.children.size();i++){
			count += numNode(root.children.get(i));
		}
		return count + 1;
	        }

	private static TreeNode<Integer> takeInputLevelWise() {
		Queue<TreeNode<Integer>> queue = new LinkedList<>();
		Scanner s = new Scanner(System.in);
		System.out.println("Enter node data ");
		int data = s.nextInt();
		TreeNode<Integer> root = new TreeNode<>(data);
		queue.add(root);
		while(!queue.isEmpty()){
			TreeNode<Integer> frontNode = queue.remove();
			System.out.println("Enter no of children of "+ frontNode.data);
			int childcount = s.nextInt();
			for(int i=0;i<childcount;i++){
				System.out.println("Enter node data of "+ (i+1) +"th child");
			    data = s.nextInt();
			    TreeNode<Integer> newNode = new TreeNode<>(data);
				frontNode.children.add(newNode);
				queue.add(newNode);
			}
		}
		
		return root;
	}

	private static void print(TreeNode<Integer> root) {
		System.out.print(root.data+" :");
		for(int i=0;i<root.children.size();i++){
			System.out.print(root.children.get(i).data+" ,");
		}
		System.out.println();
		for(int i=0;i<root.children.size();i++){
			print(root.children.get(i));
		}
	}

	private static TreeNode<Integer> takeInput(Scanner s) {
		System.out.println("enter node data");
		int data = s.nextInt();
		TreeNode<Integer> root = new TreeNode<>(data);
		System.out.println("Enter No of children of "+ data);
		int children = s.nextInt();
		for(int i=0;i< children;i++){
			TreeNode<Integer> child = takeInput();
			root.children.add(child);
		}
		return root;
	}

}
