public class solution {

    int[] dx = {1 , -1, 0, 0};
    int[] dy = {0 , 0, 1, -1};
    int findCycle = 0;
    
    int solve(String[] board , int n, int m)
    {
        boolean visited[][] = new boolean[n][m];
        int ans = 0;

       for(int i=0;i < n;i++){
            for(int j=0;j < m;j++){
                if(visited[i][j] == false){
                    DFS(board ,i ,j ,-1 ,-1 ,board[i].charAt(j) ,n ,m ,visited);
                }
            }
        }  
        
        return findCycle;
    }	
    
    public static boolean valid(int x ,int y ,int n ,int m){
        if(x >= 0 && x < n && y >= 0 && y < m){
            return true;
        }else{
            return false;
        }
    }

    public void DFS(String board[] ,int x ,int y ,int fromX ,int fromY, char needColor ,int n ,int m ,boolean visited[][]){

        if(board[x].charAt(y) != needColor){
            return;
        }

        if(visited[x][y] == true){
            findCycle = 1;
            return;
        }

        visited[x][y] = true;


        for(int i=0;i < 4;i++){
            int x1 = x + dx[i];
            int y1 = y + dy[i];

            if(x1 == fromX && y1 == fromY){
                continue;
            }
            if(valid(x1,y1,n,m)){
                DFS(board,x1,y1,x,y,needColor,n,m,visited);
            }
        }
    }

}
