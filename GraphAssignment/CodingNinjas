public class solution {

    int solve(String[] Graph , int N, int M)
    {
        int ans = 0;
        boolean visited[][] = new boolean[N][M];

        for(int i=0;i < N;i++){
            ans = 0;
            for(int j=0;j < M ;j++){
                if(Graph[i].charAt(j) == 'C'){
                    ans = DFS(Graph,i,j,1,visited,N,M);
                    if(ans == 1){
                        break;
                    }
                }
            }
            if(ans == 1){
                break;
            }
        }
        return ans;
    }	

    int xdir[] = {-1,-1,0,1,1,1,0,-1};
    int ydir[] = {0,1,1,1,0,-1,-1,-1};
  
    String pattern = "CODINGNINJAS";
    
    public static boolean valid(int x1,int y1,int N,int M){
        if(x1 >= 0 && x1 < N && y1 >= 0 && y1 < M){
            return true;
        }else{
            return false;
        }
    }
    
    public int DFS(String[] Graph,int x, int y ,int count,boolean visited[][],int N,int M){
    
        if(count == 11){
            return 1;
        }
        
         visited[x][y] = true;
        int x1 = -1;
        int y1 = -1;
        int ans = 0;
        
        for(int i=0;i<8;i++){
             x1 = x + xdir[i];
             y1 = y + ydir[i];
           
            
            if(valid(x1,y1,N,M)){
                if(Graph[x1].charAt(y1) == pattern.charAt(count) && !visited[x1][y1]){
                    ans = DFS(Graph,x1,y1,count+1,visited,N,M);
                    if(ans == 1){
                        visited[x1][y1] = false;
                        return 1;
                    }
                }
            }  

        }
        
        visited[x][y] = false;
        return ans;
        
    }
    
}
