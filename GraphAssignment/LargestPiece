public class solution {
    
    public static int NMAX = 55;
    public static int[][] visited = new int[NMAX][NMAX];
    public static String []A = new String[NMAX];
    int cx [] ={0,0,-1,1};
    int cy [] ={1,-1,0,0};
    
    public int max(int a,int b){
        if(a>b)
            return a;
        return b;
    }
    
    public int dfs(int x,int y,int n,String cake[]){
        if(visited[x][y] == 1){
            return 0;
        }
        visited[x][y] = 1;
        int count = 1;
        for(int i=0;i<4;i++){
            int dx = x + cx[i];
            int dy = y + cy[i];
            
            if(dx >= 0 && dx < n &&dy >= 0 && dy < n && cake[dx].charAt(dy) == '1'){
                count += dfs(dx,dy,n,cake);
            }
        }
        return count;
    }
    
    public int solve(int n,String cake[]) {
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         A[i] = cake[i]; 
        //     }
        // }
        int maxsize = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(cake[i].charAt(j) == '1' && visited[i][j] == 0){
                    maxsize = max(maxsize,dfs(i,j,n,cake));
                }
            }
        }
        return maxsize;
    }
}
