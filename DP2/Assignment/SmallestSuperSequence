public class Solution {

    public static int smallestSuperSequence(String str1, String str2) {

        int m = str1.length();
        int n = str2.length();
		
		int DP[][] = new int[m+1][n+1];
		
		int x = 1;
		for(int i = n-1;i >= 0; i--){
			DP[m][i] = x++;
		}
		
		x =1;
		for(int i = m-1;i >= 0; i--){
			DP[i][n] = x++;
		}

        for(int i = m-1;i >= 0;i--){
            for(int j = n-1;j >= 0;j--){
                if(str1.charAt(i) == str2.charAt(j)){
                    DP[i][j] = DP[i+1][j+1] +1;
                }else{
                    DP[i][j] = Math.min(DP[i][j+1],DP[i+1][j]) + 1;
                }
            }
        }

        return DP[0][0];
    }
    }
    
    
    ------------------------------------------------------------
    
    RECURSIVE
    
    
        public static int solve(String str1 ,String str2 ,int i ,int j){
        if(i == str1.length()){
            return str2.length()-j;
        }
        
        if(j == str2.length()){
            return str1.length()-i;
        }
        
        if(str1.charAt(i) == str2.charAt(j)){
            return 1 + solve(str1,str2,i+1,j+1);
        }else{
            int op1 = solve(str1,str2,i+1,j);
            int op2 = solve(str1,str2,i,j+1);   
            return 1 + Math.min(op1,op2);
        }
        
    }
