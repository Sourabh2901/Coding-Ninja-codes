TOP DOWN FILLING
---------------------------------------------------------------------------------------------

public class Solution {

    public static int editDistance(String s1, String s2){

        int m = s1.length();
        int n = s2.length();

        int DP[][] = new int[m+1][n+1];

        for(int i=0;i<=m ;i++){
            DP[i][0] = i;
        }

        for(int i=0;i<=n ;i++){
            DP[0][i] = i;
        }

        for(int i=1;i <= m;i++){
            for(int j=1;j <= n;j++){
                int ans;
                if(s1.charAt(m-i) == s2.charAt(n-j)){
                    ans = DP[i-1][j-1];
                }else{
                    int op1 = DP[i-1][j-1];
                    int op2 = DP[i-1][j];
                    int op3 = DP[i][j-1];
                    ans = Math.min(op1,Math.min(op2,op3)) + 1;
                }

                DP[i][j] = ans;
            }
        }
        return DP[m][n];
    }
}


---------------------------------------------------------------------------------------

//BOTTOM UP FILLING

ublic class Solution {

	
	public static int editDistance(String s1, String s2){
		
        int m = s1.length();
        int n = s2.length();
        
        int dp[][] = new int[m+1][n+1];
        
        int x = 0;
        for(int i=n;i >= 0;i--){
            dp[m][i] = x++;
        }
        
        x = 0;
        for(int i=m;i >=0 ;i--){
            dp[i][n] = x++;
        }
        
        for(int i=m-1;i >= 0;i--){
            for(int j=n-1;j >= 0;j--){
                if(s1.charAt(i) == s2.charAt(j)){
                    dp[i][j] = dp[i+1][j+1];
                }else{
                    //Insert
                    int ans1 = dp[i][j+1];
                    //delete
                    int ans2 = dp[i+1][j];
                    //Replace
                    int ans3 = dp[i+1][j+1];
                    
                    dp[i][j] = 1 + Math.min(ans1,Math.min(ans2,ans3));
                }
            }
        }
        
        return dp[0][0];   
	}
}

