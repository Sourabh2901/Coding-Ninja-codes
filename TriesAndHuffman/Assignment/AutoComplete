import java.util.ArrayList;

class TrieNode{
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {
	private TrieNode root;
	
	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}
	
	
	public void autoComplete(ArrayList<String> input, String word) {
		// Complete this function
		// Print the output as specified in question
        for(int i=0;i < input.size();i++){
            String str = input.get(i);
            add(str);
        }
        
        TrieNode ans = findWord(root ,word);
        
        if(ans != null){
            findAllPossibleWords(ans ,word ,word.length());
        }   
	}
    
    private TrieNode findWord(TrieNode root ,String word){
        if(word.length() == 0){
            return root;
        }
        
        int childIndex = word.charAt(0) - 'a';
        TrieNode child = root.children[childIndex];
        
        if(child != null){
            return findWord(child ,word.substring(1));
        }
        return null;
    }
    
    private void findAllPossibleWords(TrieNode root ,String word ,int wordlength){
        if(root.childCount == 0){
            if(word.length() > wordlength){
                 System.out.println(word);
            }
            return;
        }
        
        if(root.isTerminating){
            System.out.println(word);
        }
        
        for(int i=0;i < root.children.length;i++){
            if(root.children[i] != null){
                findAllPossibleWords(root.children[i] ,word + root.children[i].data ,wordlength);
            }
        }       
    }
}

