	private static BinaryTreeNode<Integer> takeInputLevelWise() {
		Scanner s = new Scanner(System.in);
		Queue<BinaryTreeNode<Integer>> queue = new LinkedList<>();
		System.out.println("Enter root data ");
		int rootdata = s.nextInt();
		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootdata);
		queue.add(root);
		
		while(!queue.isEmpty()){
			BinaryTreeNode<Integer> frontNode = queue.remove();		
			System.out.println("Enter left Child of "+frontNode.data);
			int leftdata = s.nextInt();
			if(leftdata != -1){
				BinaryTreeNode<Integer> leftChild = new BinaryTreeNode<>(leftdata);
				frontNode.left = leftChild;
				queue.add(leftChild);
			}
			System.out.println("Enter right Child of "+frontNode.data);
			int rightdata = s.nextInt();
			if(rightdata != -1){
				BinaryTreeNode<Integer> rightChild = new BinaryTreeNode<>(rightdata);
				frontNode.right = rightChild;
				queue.add(rightChild);
			}
		}
		return root;
	}
