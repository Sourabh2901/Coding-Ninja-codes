import java.util.ArrayList;
 import java.util.Queue;
 import java.util.LinkedList;

public class Solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */

	public static void printLevelWise(BinaryTreeNode<Integer> root){
		
		if(root == null){
            return;
        }
        
        Queue<BinaryTreeNode<Integer>> queue = new LinkedList<>();
        queue.add(root);
        queue.add(null);
        
        while(!queue.isEmpty()){
            BinaryTreeNode<Integer> frontNode = queue.remove();
            if(frontNode == null){
                if(queue.isEmpty()){
                    break;
                }
                queue.add(null);
                System.out.println();
            }else{
                if(frontNode.left != null){
                    queue.add(frontNode.left);
                }
                if(frontNode.right != null){
                    queue.add(frontNode.right);
                }
                System.out.print(frontNode.data+" ");
            }
        }

    }
}
